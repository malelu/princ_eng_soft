------------------------------------------------
--	Marina LeÃ£o Lucena
--	1011010
------------------------------------------------



function initialize_vector(vector)
--------------------------------------------
--Initialize a vector from index 0 to 26 with
--number 0.
--Parameter:
--   vector : vector to be initialized
--------------------------------------------
   for index = 1, 26 do
      vector[index] = 0
   end
end


------------------------- get secret word --------------------

-- see if the file exists
function file_exists(file)
  local new_file = io.open(file, "rb")
  if new_file then new_file:close() end
  return new_file ~= nil
end


function pick_word(filename, line_number)
----------------------------------------------------
--   Return a word from a pre defined line in a file
--   Parameters:
--      filename: string containing the name of the file.
--      line_number: integer containing the number of the
--                   line to be returned
--   Return:
--      line: variable containing the whole line
--      -1: if the line is not found, return -1
-----------------------------------------------------
   local cont=0
   for line in io.lines(filename) do
      cont=cont+1
      if cont==line_number then 
         return line;
      end
   end
   return -1;
end

-- 
function choose_random_line (file, number_lines)
------------------------------------------------------------
--   choose a random line number from the file 
--   (not considering the first line)
-----------------------------------------------------------
   math.randomseed(os.time())
   return math.random(2, number_lines)
end



function get_secret_word()
-----------------------------------------------------------
-- Get random word from the file to be the secret word.
-- Return:
--    chosen_word: variable containing the chosen word
--    picked from a line
----------------------------------------------------------
   local filename = "words.txt" 
   file = file_exists(filename)
	--pegar o file do retorno da funcao
   --if not file_exists(name_file) then
   if not file then 
      return {} 
   end
   
   number_lines = pick_word(filename, 1)
   chosen_line = choose_random_line (file, number_lines)
   chosen_word = pick_word(filename, chosen_line)
   
   return chosen_word
end

------------------------- get valid letter --------------------

function get_letter ()
------------------------------------------------
-- Get letter from the user
-- Return:
--    letter: variable containing the data written
--    by the user
-----------------------------------------------
   local letter
   io.write("Guess a letter:\n ")
   letter=io.read()
   return letter
end 



function analyze_correctness (letter)
------------------------------------------------
-- Analyze if the input is a single uppercase letter
-- Parameter:
--   letter: variable containing the user's input
-- Return:
--    true if variable letter contains any uppercase
--         letter from A to Z
--    false if variable letter doesn't respect the
--         above condition
-----------------------------------------------
   if #letter == 1 then
      if letter >= 'A' and letter <= 'Z' then
         return true 
      elseif letter >= 'a' and letter <= 'z' then
         io.write("Please use uppercase letter\n")
      else 
         io.write("Please guess a letter from the alphabet\n")
      end
   else
      io.write("Please guess only one letter at a time\n")
   end
   return false
end

function analyze_if_letter_repeated (letter, vector_of_situation_letters)
------------------------------------------------
-- Analyze if a given valid letter was already guessed
-- Parameter:
--   letter: variable containing a valid letter
--   vector_of_situation_letters: vector containing 26 indexes. 
--      If the index is 0, the letter has not been picked yet. 
-- Return:
--    true if the letter was picked for the first time.
--    false if the letter had already been picked.
-----------------------------------------------
   if vector_of_situation_letters[string.byte(letter)-64] ~= 0 then 
      io.write("You already chose this letter\n")
      return false
   else
      return true
   end
end


function get_valid_letter()
------------------------------------------------
-- Get letter from user and return when it's valid
-- Return:
--    letter: valid non repeated letter
-----------------------------------------------
   local letter
   local guess = false

   repeat
      letter = get_letter()
      guess = analyze_correctness(letter)
      if guess == true then
         guess = analyze_if_letter_repeated (letter, vector_of_situation_letters)
      end
   until guess == true
   
   return letter
end


function update_vector (letter, word, vector_of_situation_letters)--, try)
------------------------------------------------
-- Upload vector_of_situation_letters with a given valid letter.
-- If the letter is part of the word, upload vector_of_situation_letters
-- with 1. If it's not, upload with -1.
-- Parameter:
--    letter: variable containing a valid letter
--    word: secret word to be guessed
--    vector_of_situation_letters: vector containing 26 indexes. 
--    try: variable containing the number of tries of the player. 
-- Return:
--    try
-----------------------------------------------
   for each_letter in string.gmatch(word, "%a") do
      if each_letter == letter then
         vector_of_situation_letters[string.byte(letter)-64] = 1
         break
      end
   end 
   -- in case the letter is not in the word
   if vector_of_situation_letters[string.byte(letter)-64] == 0 then
      vector_of_situation_letters[string.byte(letter)-64] = -1
      try = try + 1
   end
   return try
end


function print_vector (word, vector_of_situation_letters)
------------------------------------------------
-- Print secret word on the screen. If the letter has not
-- been guessed yet, print _.
-- Parameter:
--    word: secret word to be guessed
--    vector_of_situation_letters: vector containing 26 indexes. 
-----------------------------------------------  
   for letter in string.gmatch(word, ".") do
      if vector_of_situation_letters[string.byte(letter)-64] == 1 then
         io.write(letter)
      elseif letter == " " then
         io.write(" ")
      else
         io.write("_")
      end 
   end
   io.write("\n")
end


function check_word_is_done (word, vector_of_situation_letters)
------------------------------------------------
-- Check if player guessed all the letters of the secret word.
-- Parameter:
--    word: secret word to be guessed
--    vector_of_situation_letters: vector containing 26 indexes.  
-- Return:
--    true if all letters were were guessed
--    false if not 
-----------------------------------------------
   for letter in string.gmatch(word, "%a") do
      if vector_of_situation_letters[string.byte(letter)-64] ~= 1 then
         return false
      end 
   end
   return true
end


function check_word_correctness (letter, word, vector_of_situation_letters)--, try)
------------------------------------------------
-- Check the situation of the word being uploaded.
-- Parameter:
--    letter: variable containing a valid letter
--    word: secret word to be guessed
--    vector_of_situation_letters: vector containing 26 indexes. 
-- Return:
--    true if all letters were were guessed
--    false if not 
-----------------------------------------------
   local game_won
   try = update_vector (letter, word, vector_of_situation_letters)--, try)
   print(try)
   print_vector (word, vector_of_situation_letters)
   game_won = check_word_is_done (word, vector_of_situation_letters)

   if game_won == true then
      io.write("Congratulations! You guessed the word!\n")
      return true
   elseif try > 5 then
      io.write("Too bad. You lost :(\n")
      io.write("Correct word: ", word, "\n")
      return true
   else
      return false
   end
end



--function play_game ()
   local secret_word
   local letter
   vector_of_situation_letters = {}
   
   local play_game = "Y"
   
   --local word_correct = false

   repeat
      try = 0
      local end_game = false
      initialize_vector(vector_of_situation_letters)

      secret_word = get_secret_word()

      while not end_game do
         letter = get_valid_letter()   
         --try = update_vector (letter, secret_word, vector_of_situation_letters, try)     
         end_game = check_word_correctness (letter, secret_word, vector_of_situation_letters)--, try)
         print("tries:", try)
      end

      --if word_correct == true then
       --  io.write("Congratulations! You guessed the word!\n")
      --else
       --  io.write("Too bad. You lost :(\n")
       --  io.write("Correct word: ", secret_word, "\n")
      --end
   
      repeat
         io.write("Do you want to play a again? [Y/N]")
         play_game = io.read()
      until play_game == "N" or play_game == "Y"

   until play_game == "N"



